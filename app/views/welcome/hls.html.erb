<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<!-- <video id="low_video" autoplay controls></video> -->
<br/>
<br/>
<br/>
<!-- <video id="medium_video" autoplay controls></video> -->
<br/>
<br/>
<br/>
<video id="high_video" autoplay controls></video>
<script>
  // hls.js is not supported on platforms that do not have Media Source
    // Extensions (MSE) enabled.
    //
    // When the browser has built-in HLS support (check using `canPlayType`),
    // we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video
    // element through the `src` property. This is using the built-in support
    // of the plain video element, without using hls.js.
    //
    // Note: it would be more normal to wait on the 'canplay' event below however
    // on Safari (where you are most likely to find built-in HLS support) the
    // video.src URL must be on the user-driven white-list before a 'canplay'
    // event will be emitted; the last video event that can be reliably
    // listened-for when the URL is not on the white-list is 'loadedmetadata'.

    // var low_video = document.getElementById('low_video');
    // var medium_video = document.getElementById('medium_video');
    var high_video = document.getElementById('high_video');

    // var low_video_src = '';
    // var medium_video_src = '';
    var high_video_src = 'https://takko-dev.s3-us-west-1.amazonaws.com/media_file/5f474291c0f4920004fc9cfa/movie.mp4_high.m3u8';



    if (Hls.isSupported()) {
      // var hls_low = new Hls();
      // hls_low.loadSource(low_video_src);
      // hls_low.attachMedia(low_video);

      // var hls_medium = new Hls();
      // hls_medium.loadSource(medium_video_src);
      // hls_medium.attachMedia(medium_video);

      var hls_high = new Hls();
      hls_high.loadSource(high_video_src);
      hls_high.attachMedia(high_video);
    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
      video.src = low_video_src;
    }
</script>
