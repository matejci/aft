# frozen_string_literal: true

class CountEligibilityCheckService
  # NOTE: only counting watch times when:
  # generated by users other than post owner and non-flagged view trackings
  # first 2 watch times in first hour, first 1 watch time in next hour
  # max 3 watch times can be counted during 24 hour period

  def initialize(flagged:, current_counts:, started_at:)
    @flagged = flagged
    @current_counts = current_counts
    @started_at = started_at
  end

  def call
    check_count_eligibility
  end

  private

  attr_reader :flagged, :current_counts, :started_at

  def check_count_eligibility
    @current_counts = [] if current_counts.first.try(:<, started_at.beginning_of_day)

    if !flagged && (current_counts.length < 2 || next_hour_eligible?)
      @current_counts << started_at
      eligible = true
    else
      eligible = false
    end

    { eligible: eligible, current_counts: current_counts }
  end

  def next_hour_eligible?
    return false unless current_counts.length == 2

    first, last = current_counts
    # first 2 counted within the first hour AND the current watch time is NOT within that same hour
    (last - first) < 3600 && (started_at - first) > 3600
  end
end
